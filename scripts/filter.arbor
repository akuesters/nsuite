SCOREP_REGION_NAMES_BEGIN
 EXCLUDE
?void?arb::mechanism_cpu_expsyn::net_receive(int,?arb::multicore::mechanism::value_type)
?arb::time_type?arb::event_binner::bin(arb::time_type,?arb::time_type)
?auto?arb::event_time(const?Event&)?*with?Event?=?arb::deliverable_event*
?std::enable_if_t<(arb::util::is_bidirectional_iterator<E>::value?&&?std::is_constructible<I,?E>::value),?I>?arb::util::upto(I,?E)?*with?I?=?__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>;?E?=?__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>*
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>;?V?=?__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>*
?arb::util::partition_range<SeqIter>?arb::util::partition_view(const?Seq&)?*with?Seq?=?std::vector<unsigned?int>;?SeqIter?=?__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>;?<template-parameter-1-3>?=?void*
?auto?arb::util::strict_view(Seq&&)?*with?Seq?=?const?arb::util::range<__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>,?__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>?>&*
?arb::util::optional<typename?arb::util::impl_seqtrait::sequence_traits<Seq>::difference_type>?arb::util::binary_search_index(const?C&,?const?Key&)?*with?C?=?arb::util::range<__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>,?__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>?>;?Key?=?unsigned?int*
?std::enable_if_t<arb::util::is_forward_iterator<Iter>::value,?arb::util::range<Iter>?>?arb::util::subrange_view(Seq&&,?Offset1,?Offset2)?*with?Seq?=?const?std::vector<unsigned?int>&;?Offset1?=?unsigned?int;?Offset2?=?unsigned?int;?Iter?=?__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>*
?std::enable_if_t<arb::util::is_forward_iterator<Iter>::value,?arb::util::range<Iter>?>?arb::util::subrange_view(Seq&&,?std::pair<_Tp1,?_Tp2>)?*with?Seq?=?const?std::vector<unsigned?int>&;?Offset1?=?unsigned?int;?Offset2?=?unsigned?int;?Iter?=?__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>*
?virtual?void?arb::mechanism_cpu_pas::nrn_state()
?virtual?void?arb::mechanism_cpu_expsyn::nrn_current()
?virtual?void?arb::mechanism_cpu_hh::nrn_state()
?virtual?void?arb::mechanism_cpu_pas::nrn_current()
?virtual?void?arb::mechanism_cpu_hh::nrn_current()
?virtual?void?arb::mechanism_cpu_expsyn::nrn_state()
?arb::spike_event&?arb::impl::tourney_tree::event(unsigned?int)
?arb::util::span<I>?arb::util::make_span(I)?*with?I?=?long?unsigned?int*
?arb::util::span<typename?std::common_type<_Tp,?_Up>::type>?arb::util::make_span(I,?J)?*with?I?=?int;?J?=?long?unsigned?int*
?arb::util::optional<Y>?arb::util::just(X&&)?*with?X?=?long?int*
?std::enable_if_t<(std::is_same<?<template-parameter-1-1>,?<template-parameter-1-2>?>::value?||?(arb::util::has_common_random_access_iterator<I,?E>::value?&&?arb::util::is_forward_iterator<T>::value)),?typename?std::iterator_traits<_OI>::difference_type>?arb::util::distance(I,?E)?*with?I?=?arb::util::partition_iterator<__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>?>;?E?=?arb::util::partition_iterator<__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>?>;?C?=?arb::util::partition_iterator<__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>?>*
?auto?arb::util::count_along(const?Seq&)?*with?Seq?=?arb::util::partition_range<__gnu_cxx::__normal_iterator<const?unsigned?int*,?std::vector<unsigned?int>?>?>*
?unsigned?int?arb::impl::tourney_tree::left(unsigned?int)?const
?const?arb::spike_event&?arb::impl::tourney_tree::event(unsigned?int)?const
?unsigned?int?arb::impl::tourney_tree::right(unsigned?int)?const
?unsigned?int?arb::impl::tourney_tree::leaf(unsigned?int)?const
?void?arb::impl::tourney_tree::merge_up(unsigned?int)
?bool?arb::impl::tourney_tree::empty()?const
?unsigned?int?arb::impl::tourney_tree::parent(unsigned?int)?const
?arb::spike_event?arb::impl::tourney_tree::head()?const
?const?unsigned?int&?arb::impl::tourney_tree::id(unsigned?int)?const
?void?arb::impl::tourney_tree::pop()
?auto?arb::event_time(const?Event&)?*with?Event?=?arb::spike_event*
?std::pair<double,?double>?arb::multicore::shared_state::time_bounds()?const
?std::pair<Value,?Value>?arb::util::minmax_value(const?Seq&,?Compare)?*with?Seq?=?std::vector<double,?arb::util::padded_allocator<double>?>;?Value?=?double;?Compare?=?std::less<double>*
?arb::util::transform_iterator<I,?typename?std::decay<_Arg>::type>?arb::util::make_transform_iterator(const?I&,?const?F&)?*with?I?=?std::__detail::_Node_iterator<std::pair<const?long?unsigned?int,?arb::sampler_association>,?false,?false>;?F?=?arb::sampler_association&?(*)(std::pair<const?long?unsigned?int,?arb::sampler_association>&)*
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?const?double*;?V?=?const?double**
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?const?arb::spike_event*;?V?=?const?arb::spike_event**
?bool?arb::threading::impl::notification_queue::try_push(arb::threading::task&)
?void?arb::threading::task_system::async(arb::threading::task)
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?arb::spike_event*;?V?=?arb::spike_event**
?std::enable_if_t<(std::is_same<?<template-parameter-1-1>,?<template-parameter-1-2>?>::value?||?(arb::util::has_common_random_access_iterator<I,?E>::value?&&?arb::util::is_forward_iterator<T>::value)),?typename?std::iterator_traits<_OI>::difference_type>?arb::util::distance(I,?E)?*with?I?=?const?arb::spike_event*;?E?=?const?arb::spike_event*;?C?=?const?arb::spike_event**
?auto?arb::util::range_pointer_view(Seq&&)?*with?Seq?=?std::vector<arb::spike_event>&;?<template-parameter-1-2>?=?void*
?auto?arb::util::range_pointer_view(Seq&&)?*with?Seq?=?arb::util::range<const?double*>&;?<template-parameter-1-2>?=?void*
?arb::util::transform_iterator<I,?typename?std::decay<_Arg>::type>?arb::util::make_transform_iterator(const?I&,?const?F&)?*with?I?=?__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>;?F?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>*
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>;?V?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>*
?auto?arb::util::transform_impl::transform_(Seq&&,?const?F&,?std::true_type)?*with?Seq?=?std::unordered_map<long?unsigned?int,?arb::sampler_association>&;?F?=?arb::sampler_association&?(*)(std::pair<const?long?unsigned?int,?arb::sampler_association>&)*
?auto?arb::util::range_pointer_view(Seq&&)?*with?Seq?=?const?std::vector<double,?arb::util::padded_allocator<double>?>&;?<template-parameter-1-2>?=?void*
?arb::util::transform_iterator<I,?typename?std::decay<_Arg>::type>?arb::util::make_transform_iterator(const?I&,?const?F&)?*with?I?=?__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>;?F?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>*
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>;?V?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>*
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>;?V?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>*
?std::enable_if_t<(std::is_same<?<template-parameter-1-1>,?<template-parameter-1-2>?>::value?||?(arb::util::has_common_random_access_iterator<I,?E>::value?&&?arb::util::is_forward_iterator<T>::value)),?typename?std::iterator_traits<_OI>::difference_type>?arb::util::distance(I,?E)?*with?I?=?const?double*;?E?=?const?double*;?C?=?const?double**
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?arb::util::transform_iterator<std::__detail::_Node_iterator<std::pair<const?long?unsigned?int,?arb::sampler_association>,?false,?false>,?arb::sampler_association&?(*)(std::pair<const?long?unsigned?int,?arb::sampler_association>&)>;?V?=?arb::util::transform_iterator<std::__detail::_Node_iterator<std::pair<const?long?unsigned?int,?arb::sampler_association>,?false,?false>,?arb::sampler_association&?(*)(std::pair<const?long?unsigned?int,?arb::sampler_association>&)>*
?auto?arb::util::transform_view(Seq&&,?const?F&)?*with?Seq?=?std::unordered_map<long?unsigned?int,?arb::sampler_association>&;?F?=?arb::sampler_association&?(*)(std::pair<const?long?unsigned?int,?arb::sampler_association>&)*
?arb::util::transform_iterator<I,?typename?std::decay<_Arg>::type>?arb::util::make_transform_iterator(const?I&,?const?F&)?*with?I?=?__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>;?F?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>*
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>;?V?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>*
?arb::util::transform_iterator<I,?typename?std::decay<_Arg>::type>?arb::util::make_transform_iterator(const?I&,?const?F&)?*with?I?=?__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>;?F?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_end(const?I&,?const?S&)?*with?I?=?const?arb::spike_event*;?S?=?const?arb::spike_event**
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_iterator(const?I&,?const?S&)?*with?I?=?const?arb::spike_event*;?S?=?const?arb::spike_event**
?bool?arb::gpu_context::has_gpu()?const
?std::vector<arb::basic_spike<arb::cell_member_type>?>&?arb::thread_private_spike_store::get()
?auto?arb::util::count_along(const?Seq&)?*with?Seq?=?std::vector<unsigned?int>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_end(const?I&,?const?S&)?*with?I?=?__gnu_cxx::__normal_iterator<arb::spike_event*,?std::vector<arb::spike_event>?>;?S?=?__gnu_cxx::__normal_iterator<arb::spike_event*,?std::vector<arb::spike_event>?>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_iterator(const?I&,?const?S&)?*with?I?=?__gnu_cxx::__normal_iterator<arb::spike_event*,?std::vector<arb::spike_event>?>;?S?=?__gnu_cxx::__normal_iterator<arb::spike_event*,?std::vector<arb::spike_event>?>*
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?__gnu_cxx::__normal_iterator<arb::spike_event*,?std::vector<arb::spike_event>?>;?V?=?__gnu_cxx::__normal_iterator<arb::spike_event*,?std::vector<arb::spike_event>?>*
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?__gnu_cxx::__normal_iterator<unsigned?int*,?std::vector<unsigned?int>?>;?V?=?__gnu_cxx::__normal_iterator<unsigned?int*,?std::vector<unsigned?int>?>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_iterator(const?I&,?const?S&)?*with?I?=?__gnu_cxx::__normal_iterator<unsigned?int*,?std::vector<unsigned?int>?>;?S?=?__gnu_cxx::__normal_iterator<unsigned?int*,?std::vector<unsigned?int>?>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_end(const?I&,?const?S&)?*with?I?=?__gnu_cxx::__normal_iterator<unsigned?int*,?std::vector<unsigned?int>?>;?S?=?__gnu_cxx::__normal_iterator<unsigned?int*,?std::vector<unsigned?int>?>*
?auto?arb::util::transform_impl::transform_(Seq&&,?const?F&,?std::true_type)?*with?Seq?=?const?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>&;?F?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>*
?auto?arb::util::transform_view(Seq&&,?const?F&)?*with?Seq?=?const?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>&;?F?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>*
?AssignableContainer&?arb::util::assign_by(AssignableContainer&,?const?Seq&,?const?Proj&)?*with?AssignableContainer?=?std::vector<arb::raw_probe_info,?std::allocator<arb::raw_probe_info>?>;?Seq?=?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>;?Proj?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_iterator(const?I&,?const?S&)?*with?I?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>;?S?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_end(const?I&,?const?S&)?*with?I?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>;?S?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>*
ble_event&)>?>,?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>?>*
?auto?arb::util::range_pointer_view(Seq&&)?*with?Seq?=?const?std::vector<arb::threshold_crossing>&;?<template-parameter-1-2>?=?void*
?AssignableContainer&?arb::util::assign(AssignableContainer&,?const?Seq&)?*with?AssignableContainer?=?std::vector<arb::raw_probe_info,?std::allocator<arb::raw_probe_info>?>;?Seq?=?arb::util::range<arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>,?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>?>*
?auto?arb::util::transform_impl::transform_(Seq&&,?const?F&,?std::true_type)?*with?Seq?=?const?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>&;?F?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>*
?auto?arb::util::transform_view(Seq&&,?const?F&)?*with?Seq?=?const?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>&;?F?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>*
?AssignableContainer&?arb::util::assign_by(AssignableContainer&,?const?Seq&,?const?Proj&)?*with?AssignableContainer?=?std::vector<float>;?Seq?=?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>;?Proj?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_iterator(const?I&,?const?S&)?*with?I?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>;?S?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_end(const?I&,?const?S&)?*with?I?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>;?S?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>*
e::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>?>,?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::deliverable_event*,?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::delive
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_end(const?I&,?const?S&)?*with?I?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>;?S?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>*
?std::enable_if_t<(!?std::is_const<typename?arb::util::impl_seqtrait::sequence_traits<Seq&&>::reference>::value)>?arb::util::sort_by(Seq&&,?const?Proj&)?*with?Seq?=?std::vector<arb::sample_event>&;?Proj?=?arb::mc_cell_group::advance(arb::epoch,?arb::time_type,?const?event_lane_subrange&)::<lambda(const?arb::sample_event&)>*
?auto?arb::util::transform_impl::transform_(Seq&&,?const?F&,?std::true_type)?*with?Seq?=?const?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>&;?F?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>*
?auto?arb::util::transform_view(Seq&&,?const?F&)?*with?Seq?=?const?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>&;?F?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>*
?AssignableContainer&?arb::util::assign_by(AssignableContainer&,?const?Seq&,?const?Proj&)?*with?AssignableContainer?=?std::vector<arb::deliverable_event_data,?std::allocator<arb::deliverable_event_data>?>;?Seq?=?std::vector<arb::deliverable_event,?std::allocator<arb::deliverable_event>?>;?Proj?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::deliverable_event*::<lambda(const?arb::deliverable_event&)>*
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?const?arb::threshold_crossing*;?V?=?const?arb::threshold_crossing**
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_iterator(const?I&,?const?S&)?*with?I?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>;?S?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>*
?AssignableContainer&?arb::util::assign_by(AssignableContainer&,?const?Seq&,?const?Proj&)?*with?AssignableContainer?=?std::vector<float>;?Seq?=?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>;?Proj?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>*
?AssignableContainer&?arb::util::assign(AssignableContainer&,?const?Seq&)?*with?AssignableContainer?=?std::vector<float>;?Seq?=?arb::util::range<arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>,?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>?>*
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?__gnu_cxx::__normal_iterator<arb::sample_event*,?std::vector<arb::sample_event>?>;?V?=?__gnu_cxx::__normal_iterator<arb::sample_event*,?std::vector<arb::sample_event>?>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_iterator(const?I&,?const?S&)?*with?I?=?__gnu_cxx::__normal_iterator<arb::sample_event*,?std::vector<arb::sample_event>?>;?S?=?__gnu_cxx::__normal_iterator<arb::sample_event*,?std::vector<arb::sample_event>?>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_end(const?I&,?const?S&)?*with?I?=?__gnu_cxx::__normal_iterator<arb::sample_event*,?std::vector<arb::sample_event>?>;?S?=?__gnu_cxx::__normal_iterator<arb::sample_event*,?std::vector<arb::sample_event>?>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_iterator(const?I&,?const?S&)?*with?I?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>;?S?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>*
?auto?arb::util::transform_view(Seq&&,?const?F&)?*with?Seq?=?const?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>&;?F?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>*
?std::enable_if_t<arb::util::is_forward_iterator<Iter>::value,?arb::util::range<Iter>?>?arb::util::subrange_view(Seq&&,?std::pair<_Tp1,?_Tp2>)?*with?Seq?=?std::vector<std::vector<arb::spike_event>?>&;?Offset1?=?unsigned?int;?Offset2?=?unsigned?int;?Iter?=?__gnu_cxx::__normal_iterator<std::vector<arb::spike_event>*,?std::vector<std::vector<arb::spike_event>?>?>*
?auto?arb::util::transform_impl::transform_(Seq&&,?const?F&,?std::true_type)?*with?Seq?=?const?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>&;?F?=?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>*
?std::enable_if_t<(std::is_same<?<template-parameter-1-1>,?<template-parameter-1-2>?>::value?||?(arb::util::has_common_random_access_iterator<I,?E>::value?&&?arb::util::is_forward_iterator<T>::value)),?typename?std::iterator_traits<_OI>::difference_type>?arb::util::distance(I,?E)?*with?I?=?__gnu_cxx::__normal_iterator<std::vector<arb::spike_event>*,?std::vector<std::vector<arb::spike_event>?>?>;?E?=?__gnu_cxx::__normal_iterator<std::vector<arb::spike_event>*,?std::vector<std::vector<arb::spike_event>?>?>;?C?=?__gnu_cxx::__normal_iterator<std::vector<arb::spike_event>*,?std::vector<std::vector<arb::spike_event>?>?>*
?std::enable_if_t<(!?std::is_const<typename?arb::util::impl_seqtrait::sequence_traits<Seq&&>::reference>::value)>?arb::util::sort_by(Seq&&,?const?Proj&)?*with?Seq?=?std::vector<unsigned?int>&;?Proj?=?arb::mc_cell_group::advance(arb::epoch,?arb::time_type,?const?event_lane_subrange&)::<lambda(arb::cell_size_type)>*
?arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_end(const?I&,?const?S&)?*with?I?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>;?S?=?arb::util::transform_iterator<__gnu_cxx::__normal_iterator<const?arb::sample_event*,?std::vector<arb::sample_event,?std::allocator<arb::sample_event>?>?>,?arb::multicore::multi_event_stream<Event>::init(std::vector<Event>)?*with?Event?=?arb::sample_event*::<lambda(const?arb::sample_event&)>?>*
?std::enable_if_t<arb::util::is_forward_iterator<Iter>::value,?arb::util::range<Iter>?>?arb::util::subrange_view(Seq&&,?Offset1,?Offset2)?*with?Seq?=?std::vector<std::vector<arb::spike_event>?>&;?Offset1?=?unsigned?int;?Offset2?=?unsigned?int;?Iter?=?__gnu_cxx::__normal_iterator<std::vector<arb::spike_event>*,?std::vector<std::vector<arb::spike_event>?>?>*
?arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?__gnu_cxx::__normal_iterator<std::vector<arb::spike_event>*,?std::vector<std::vector<arb::spike_event>?>?>;?V?=?__gnu_cxx::__normal_iterator<std::vector<arb::spike_event>*,?std::vector<std::vector<arb::spike_event>?>?>*
?void?arb::{anonymous}::extend_to(ResizableContainer&,?const?Index&)?*with?ResizableContainer?=?std::vector<double>;?Index?=?unsigned?int*
?std::enable_if_t<(std::is_same<?<template-parameter-1-1>,?<template-parameter-1-2>?>::value?||?(arb::util::has_common_random_access_iterator<I,?E>::value?&&?arb::util::is_forward_iterator<T>::value)),?typename?std::iterator_traits<_OI>::difference_type>?arb::util::distance(I,?E)?*with?I?=?__gnu_cxx::__normal_iterator<arb::{anonymous}::cv_param*,?std::vector<arb::{anonymous}::cv_param>?>;?E?=?__gnu_cxx::__normal_iterator<arb::{anonymous}::cv_param*,?std::vector<arb::{anonymous}::cv_param>?>;?C?=?__gnu_cxx::__normal_iterator<arb::{anonymous}::cv_param*,?std::vector<arb::{anonymous}::cv_param>?>*
tick_type?arb::profile::posix_clock_gettime_monotonic_ns()
*arb::profile::recorder::enter(arb::profile::region_id_type)
*arb::profile::profiler::enter(arb::profile::region_id_type)
*arb::profile::recorder::leave()
*arb::profile::profiler_enter(arb::profile::region_id_type)
*arb::profile::profiler::leave()
*arb::profile::profiler_leave()
arb::simd::simd_detail::indirect_expression*
arb::util::range<U,?V>?arb::util::make_range(const?U&,?const?V&)?*with?U?=?__gnu_cxx::__normal_iterator<double*,?std::vector<double,?arb::util::padded_allocator<double>?>?>;?V?=?__gnu_cxx::__normal_iterator<double*,?std::vector<double,?arb::util::padded_allocator<double>?>?>*
auto?arb::util::canonical_view(Seq&&)?*
arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_iterator(const?I&,?const?S&)?*with?I?=?__gnu_cxx::__normal_iterator<double*,?std::vector<double,?arb::util::padded_allocator<double>?>?>;?S?=?__gnu_cxx::__normal_iterator<double*,?std::vector<double,?arb::util::padded_allocator<double>?>?>*
arb::util::sentinel_iterator_t<I,?S>?arb::util::make_sentinel_end(const?I&,?const?S&)?*with?I?=?__gnu_cxx::__normal_iterator<double*,?std::vector<double,?arb::util::padded_allocator<double>?>?>;?S?=?__gnu_cxx::__normal_iterator<double*,?std::vector<double,?arb::util::padded_allocator<double>?>?>*
*arb::util::fill(Seq&&,?const?V&)?*with?Seq?=?std::vector<double,?arb::util::padded_allocator<double>?>&;?V?=?int*
*arb::multicore::ion_state::nernst(arb::fvm_value_type)
*arb::multicore::ion_state::init_concentration()
*arb::multicore::ion_state::zero_current()
arb::util::partition_range<SeqIter>?arb::util::partition_view(const?Seq&)?*with?Seq?=?std::vector<int,?arb::util::padded_allocator<int>?>;?SeqIter?=?__gnu_cxx::__normal_iterator<const?int*,?std::vector<int,?arb::util::padded_allocator<int>?>?>;?<template-parameter-1-3>?=?void*
arb::memory::array_view<T,?arb::memory::host_coordinator<T>?>?arb::memory::make_view(std::vector<_Tp,?_Alloc>&)?*with?T?=?double;?Allocator?=?arb::util::padded_allocator<double>*
arb::memory::const_array_view<T,?arb::memory::host_coordinator<T>?>?arb::memory::make_const_view(const?std::vector<_Tp,?_Alloc>&)?*with?T?=?double;?Allocator?=?arb::util::padded_allocator<double>*
std::enable_if_t<(arb::util::is_bidirectional_iterator<E>::value?&&?std::is_constructible<I,?E>::value),?I>?arb::util::upto(I,?E)?*with?I?=?__gnu_cxx::__normal_iterator<const?int*,?std::vector<int,?arb::util::padded_allocator<int>?>?>;?E?=?__gnu_cxx::__normal_iterator<const?int*,?std::vector<int,?arb::util::padded_allocator<int>?>?>*
virtual?*arb::mechanism_cpu_expsyn::write_ions()
virtual?*arb::mechanism_cpu_pas::write_ions()
virtual?*arb::mechanism_cpu_hh::write_ions()
*arb::mechanism_cpu_hh::rates(arb::multicore::mechanism::index_type,?const?simd_value&,?const?simd_value&)
*arb::multicore::shared_state::ions_init_concentration()
*arb::multicore::shared_state::ions_nernst_reversal_potential(arb::fvm_value_type)
virtual?*arb::mechanism_cpu_expsyn::deliver_events(arb::multicore::multi_event_stream<arb::deliverable_event>::state)
*arb::multicore::shared_state::zero_currents()
*arb::multicore::shared_state::add_gj_current()
*arb::multicore::shared_state::update_time_to(arb::fvm_value_type,?arb::fvm_value_type)
*arb::multicore::shared_state::set_dt()
*arb::multicore::shared_state::take_samples(const?state&,?arb::multicore::array&,?arb::multicore::array&)
arb::util::span<typename?std::common_type<_Tp,?_Up>::type>?arb::util::make_span(std::pair<_T1,?_T2>)?*with?I?=?int;?J?=?int*
*arb::fvm_lowered_cell_impl<Backend>::update_ion_state()?*with?Backend?=?arb::multicore::backend*
*arb::memory::copy(LHS&&,?RHS&&)?*with?LHS?=?const?std::vector<double,?arb::util::padded_allocator<double>?>&;?RHS?=?std::vector<double,?arb::util::padded_allocator<double>?>&*
std::enable_if_t<(std::is_same<?<template-parameter-1-1>,?<template-parameter-1-2>?>::value?||?(arb::util::has_common_random_access_iterator<I,?E>::value?&&?arb::util::is_forward_iterator<T>::value)),?typename?std::iterator_traits<_OI>::difference_type>?arb::util::distance(I,?E)?*with?I?=?arb::util::partition_iterator<__gnu_cxx::__normal_iterator<const?int*,?std::vector<int,?arb::util::padded_allocator<int>?>?>?>;?E?=?arb::util::partition_iterator<__gnu_cxx::__normal_iterator<const?int*,?std::vector<int,?arb::util::padded_allocator<int>?>?>?>;?C?=?arb::util::partition_iterator<__gnu_cxx::__normal_iterator<const?int*,?std::vector<int,?arb::util::padded_allocator<int>?>?>?>*
*arb::memory::copy(LHS&&,?RHS&&)?*with?LHS?=?std::vector<double,?arb::util::padded_allocator<double>?>&;?RHS?=?std::vector<double,?arb::util::padded_allocator<double>?>&*
arb::util::span<typename?std::common_type<_Tp,?_Up>::type>?arb::util::make_span(I,?J)?*with?I?=?int;?J?=?int*
SCOREP_REGION_NAMES_END
